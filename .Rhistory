runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
getInpChoice
View(GetEarlyTopUp)
View(GetSalesClientData)
View(getSalesData)
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
install.packages("future")
install.packages("promises")
install.packages("promises")
shiny::runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
t = seq(0, 1, 0.001)
data =data.frame(
"time" = seq(0, 1, 0.001)
)
rm(t)
data$B1t = 0
View(data)
data$B1t = 0
data$B2t = with(data,
if(t >= 0 & t < 0.342){
((t-0.5)^2-0.025)
}
if(t >=  0.342 & t <= 0.658){
0
}
if(t >0.658  & t <= 1){
(-(t-0.5)^2+0.025)
}
)
data =data.frame(
"time" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
View(data)
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
View(data)
?integrate
View(data)
data$t
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
View(data)
?pi
pi
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
data$X2t = rnorm(1) + rnorm(1)*sin(2*pi*data$t) + rnorm(1)*(cost(2*pi*data$t)) + rnorm(1)*(sin(4*pi*data$t)) + rnorm(1)* (cos(4*pi*data$t))
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
data$X2t = rnorm(1) + rnorm(1)*sin(2*pi*data$t) + rnorm(1)*(cos(2*pi*data$t)) + rnorm(1)*(sin(4*pi*data$t)) + rnorm(1)* (cos(4*pi*data$t))
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1*data$t[i] + a2* (data$t[i]^2) + a3* (data$t[i]^3)
data$X2t[i] = a0 + a1*sin(2*pi*data$t[i]) + a2*(cos(2*pi*data$t[i])) + a3*(sin(4*pi*data$t[i])) + a4* (cos(4*pi*data$t[i]))
}
nrow(data)
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * (cos(2*pi*data$t[i])) + a3 * (sin(4*pi*data$t[i])) + a4 * (cos(4*pi*data$t[i]))
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
print0(a0,a1,a2,a3,a4)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
print(paste0(a0,a1,a2,a3,a4))
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in 1:nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
print(paste0(a0,a1,a2,a3,a4))
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in 1:nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
B3t <- function(t){
t**3 - 1.6*t**2 +0.76*t+1
}
B3t <- function(t){
t**3 - 1.6*t**2 +0.76*t+1
}
B2t <- function(t){
ifelse(t >= 0 & t < 0.342,
((t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse(t >  0.658 & t <= 1,
(-(t-0.5)^2+0.025),
0
)))
}
B1t <- function(t){
0
}
B1t(0.05)
B2t(0.05)
B2t(0.05)
B3t(0.05)
integrate(B3t,0,1)$value
integrate(B1t,0,1)$value
integrate(B2t,0,1)$value
integrate(B2t*X1t,0,1)$value
data =data.frame(
"t" = seq(0, 1, 0.001)
)
B3t <- function(t){
t**3 - 1.6*t**2 +0.76*t+1
}
B2t <- function(t){
ifelse(t >= 0 & t < 0.342,
((t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse(t >  0.658 & t <= 1,
(-(t-0.5)^2+0.025),
0
)))
}
B1t <- function(t){
0
}
X1t <- function(t){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
return(a0 + a1*t + a2*(t^2) + a3*(t^3))
}
X2t <- function(t){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
return(a0 + a1 * sin(2*pi*t) + a2 * cos(2*pi*t) + a3 * sin(4*pi*t) + a4 * cos(4*pi*t))
}
#data$sigmaSq = 0.25 * integrate(B1t(data$t))
#You can generate the standard normal distribution using the function rnorm().
#Also, the integral function works with functions and limits.
#You don't need to calculate the values of the function,
#just define it: B3t <- function(t) (t**3 - 1.6*t**2 +0.76*t+1 ) .
#Then the single integral of B3t from 0 to 1 would be integrate(B3t,0,1)$value
integrate(B2t*X1t,0,1)$value
mean(B1t(data$t))
mean(B2t(data$t))
mean(B3t(data$t))
shiny::runApp('F:/RProjects/jadeng177')
runApp('F:/RProjects/jadeng177')
shiny::runApp('F:/RProjects/bnlawyersbnlawm')
setwd("F:\\RProjects\\camilla")
bd = read.csv("IMDB-Movie-Data.csv")
df = data.frame("Genre" = unique(unlist(bd[c("Genre1","Genre2", "Genre3")])))
df = data.frame("Genre" = df[!(is.na(df$Genre) | df$Genre==""), ])
View(df)
View(bd)
max = 100
year = 2012
genre = "Action"
sub_data = bd[which((bd$Genre1==genre | bd$Genre2==genre | bd$Genre3==genre)& bd$Year==year),]
View(sub_data)
metric = "Revenue"
sub_data = sub_data[,c("Title", metric)]
View(sub_data)
sub_data = sub_data[order(sub_data[,2]),]
View(sub_data)
sub_data = sub_data[order(-sub_data[,2]),]
shiny::runApp()
runApp()
sub_data = data.frame(sub_data, stringsAsFactors = FALSE)
runApp()
runApp()
?normalize
??normalize
runApp()
as.data.frame(apply(bd[, c("Rating", "Votes", "Revenue", "Metascore")], 2, function(x) (x - min(x))/(max(x)-min(x))))
class(bd$Revenue)
class(bd$Metascore)
runApp()
runApp()
runApp()
(bd$Rating - min(bd$Rating)) / (max(bd$Rating)- min(bd$Rating))
runApp()
sub_data[2,2:5]
sub_data[1,2:5]
sub_data
runApp()
runApp()
runApp()
runApp()
actorName = "Chris Pratt"
co_actorsDF = data.frame("CoActors" = unique(unlist(bd[c("Actor1","Actor2", "Actor3", "Actor4")])))
setwd("F:\\RProjects\\camilla")
bd = read.csv("IMDB-Movie-Data.csv")
co_actorsDF = data.frame("CoActors" = unique(unlist(bd[c("Actor1","Actor2", "Actor3", "Actor4")])))
View(co_actorsDF)
co_actorsDF = data.frame("CoActors" = co_actorsDF[!(is.na(bd$CoActors)
| bd$CoActors==""
| bd$CoActors!=actorName ), ])
co_actorsDF = data.frame("CoActors" = co_actorsDF[!(is.na(co_actorsDF$CoActors)
| co_actorsDF$CoActors==""
| co_actorsDF$CoActors!=actorName ), ])
actorName = "Chris Pratt"
co_actorsDF = data.frame("CoActors" = unique(unlist(bd[c("Actor1","Actor2", "Actor3", "Actor4")])))
co_actorsDF = data.frame("CoActors" = co_actorsDF[!(is.na(co_actorsDF$CoActors)
| co_actorsDF$CoActors==""
| co_actorsDF$CoActors!=actorName ), ])
actorName = "Chris Pratt"
co_actorsDF = data.frame("CoActors" = unique(unlist(bd[c("Actor1","Actor2", "Actor3", "Actor4")])))
co_actorsDF = data.frame("CoActors" = co_actorsDF[!(is.na(co_actorsDF$CoActors)
| co_actorsDF$CoActors==""
| co_actorsDF$CoActors==actorName ), ])
actorName = "Chris Pratt"
co_actorsDF = data.frame("CoActors" = unique(unlist(bd[c("Actor1","Actor2", "Actor3", "Actor4")])))
co_actorsDF = data.frame("CoActors" = co_actorsDF[!(is.na(co_actorsDF$CoActors)
| co_actorsDF$CoActors==""
| co_actorsDF$CoActors==actorName ), ])
rep("A",10)
class(rep("A",10))
c(rep("A",10))
class(c(rep("A",10)))
is.vector(rep("A",10))
runApp()
runApp()
unlist(bd$Actor1)
runApp()
setwd("F:\\RProjects\\camilla")
bd = read.csv("IMDB-Movie-Data.csv")
actorName = "Chris Pratt"
sub_data = bd[which((bd$Actor1==actorName | bd$Actor1==actorName |
bd$Actor1==actorName  | bd$Actor4==actorName)),]
View(sub_data)
actorName = "Vin Diesel"
sub_data = bd[which((bd$Actor1==actorName | bd$Actor1==actorName |
bd$Actor1==actorName  | bd$Actor4==actorName)),]
View(sub_data)
sub_data = bd[which((bd$Actor1==actorName | bd$Actor2==actorName |
bd$Actor3==actorName  | bd$Actor4==actorName)),]
sub_data = data.frame(sub_data, stringsAsFactors = FALSE)
directorDF = data.frame("Director" = unique(unlist(sub_data[c("Director")])))
directorDF = data.frame("Director" = directorDF[!(is.na(directorDF$Director) | directorDF$Director==""), ])
View(directorDF)
co_actorsDF = data.frame("CoActors" = unique(unlist(sub_data[c("Actor1","Actor2", "Actor3", "Actor4")])))
co_actorsDF = data.frame("CoActors" = co_actorsDF[!(is.na(co_actorsDF$CoActors)
| co_actorsDF$CoActors==""
| co_actorsDF$CoActors==actorName ), ])
View(co_actorsDF)
View(co_actorsDF)
src <- rep(actorName,nrow(directorDF)+nrow(co_actorsDF))
target <- c(as.character(directorDF$Director),as.character(co_actorsDF$CoActors))
networkData <- data.frame(src, target, stringsAsFactors = FALSE)
nodes <- data.frame(name = unique(c(src, target)), stringsAsFactors = FALSE)
nodes$id <- 0:(nrow(nodes) - 1)
View(nodes)
# create a data frame of the edges that uses id 0:9 instead of their names
edges <- networkData %>%
left_join(nodes, by = c("src" = "name")) %>%
select(-src) %>%
rename(source = id) %>%
left_join(nodes, by = c("target" = "name")) %>%
select(-target) %>%
rename(target = id)
View(edges)
edges$width <- 1
nodes <- data.frame(name = unique(c(src, target)), stringsAsFactors = FALSE)
nodes$id <- 0:(nrow(nodes) - 1)
# create a data frame of the edges that uses id 0:9 instead of their names
edges <- networkData %>%
left_join(nodes, by = c("src" = "name")) %>%
select(-src) %>%
rename(source = id) %>%
left_join(nodes, by = c("target" = "name")) %>%
select(-target) %>%
rename(target = id)
edges$width <- 1
# make a grouping variable that will match to colours
nodes$group <- ifelse(nodes$name %in% directorDF, "Director", "Actor")
# simple with default colours
forceNetwork(Links = edges, Nodes = nodes,
Source = src,
Target = target,
NodeID = node$name,
Group = node$group,
Value = edges$width,
opacity = 0.9,
zoom = TRUE)
View(directorDF)
ifelse(nodes$name %in% directorDF, "Director", "Actor")
View(directorDF)
runApp()
ifelse(nodes$name %in% directorDF$Director, "Director", "Actor")
View(networkData)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('F:/RProjects/Elecgridv11')
